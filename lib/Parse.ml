(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_scala"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "automatic_semicolon", None;
  "string_start", None;
  "string_end", None;
  "identifier", None;
  "string_middle", None;
  "operator_identifier", None;
  "wildcard", None;
  "multiline_string_end", None;
  "multiline_string_middle", None;
  "modifiers",
  Some (
    Repeat1 (
      Alt [|
        Token (Literal "abstract");
        Token (Literal "final");
        Token (Literal "sealed");
        Token (Literal "implicit");
        Token (Literal "lazy");
        Token (Literal "override");
        Token (Literal "private");
        Token (Literal "protected");
      |];
    );
  );
  "multiline_string_start", None;
  "number", None;
  "simple_string", None;
  "stable_identifier",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "stable_identifier");
      |];
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "package_identifier",
  Some (
    Seq [
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ".");
          Token (Name "identifier");
        ];
      );
    ];
  );
  "renamed_identifier",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "=>");
      Alt [|
        Token (Name "identifier");
        Token (Name "wildcard");
      |];
    ];
  );
  "stable_type_identifier",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "stable_identifier");
      |];
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "import_selectors",
  Some (
    Seq [
      Token (Literal "{");
      Alt [|
        Token (Name "identifier");
        Token (Name "renamed_identifier");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "identifier");
            Token (Name "renamed_identifier");
          |];
        ];
      );
      Token (Literal "}");
    ];
  );
  "import_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "stable_identifier");
        Token (Name "identifier");
      |];
      Opt (
        Seq [
          Token (Literal ".");
          Alt [|
            Token (Name "wildcard");
            Token (Name "import_selectors");
          |];
        ];
      );
    ];
  );
  "import_declaration",
  Some (
    Seq [
      Token (Literal "import");
      Token (Name "import_expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "import_expression");
        ];
      );
    ];
  );
  "alternative_pattern",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
      Token (Literal "|");
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
    ];
  );
  "annotated_type",
  Some (
    Seq [
      Token (Name "simple_type");
      Repeat (
        Token (Name "annotation");
      );
    ];
  );
  "annotation",
  Some (
    Seq [
      Token (Literal "@");
      Token (Name "simple_type");
      Repeat (
        Token (Name "arguments");
      );
    ];
  );
  "arguments",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "assignment_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "block",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Alt [|
          Token (Name "package_clause");
          Token (Name "package_object");
          Token (Name "class_definition");
          Token (Name "import_declaration");
          Token (Name "object_definition");
          Token (Name "trait_definition");
          Token (Name "val_definition");
          Token (Name "val_declaration");
          Token (Name "var_definition");
          Token (Name "var_declaration");
          Token (Name "type_definition");
          Token (Name "function_definition");
          Token (Name "function_declaration");
        |];
      |];
      Repeat (
        Seq [
          Alt [|
            Token (Literal ";");
            Token (Name "automatic_semicolon");
          |];
          Alt [|
            Token (Name "expression");
            Alt [|
              Token (Name "package_clause");
              Token (Name "package_object");
              Token (Name "class_definition");
              Token (Name "import_declaration");
              Token (Name "object_definition");
              Token (Name "trait_definition");
              Token (Name "val_definition");
              Token (Name "val_declaration");
              Token (Name "var_definition");
              Token (Name "var_declaration");
              Token (Name "type_definition");
              Token (Name "function_definition");
              Token (Name "function_declaration");
            |];
          |];
        ];
      );
      Opt (
        Alt [|
          Token (Literal ";");
          Token (Name "automatic_semicolon");
        |];
      );
    ];
  );
  "block_",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "block");
      );
      Token (Literal "}");
    ];
  );
  "call_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "arguments");
      Opt (
        Alt [|
          Token (Name "block_");
          Token (Name "case_block");
        |];
      );
    ];
  );
  "capture_pattern",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "@");
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
    ];
  );
  "case_block",
  Some (
    Alt [|
      Seq [
        Token (Literal "{");
        Token (Literal "}");
      ];
      Seq [
        Token (Literal "{");
        Repeat1 (
          Token (Name "case_clause");
        );
        Token (Literal "}");
      ];
    |];
  );
  "case_class_pattern",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "stable_type_identifier");
      |];
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "identifier");
            Token (Name "capture_pattern");
            Token (Name "tuple_pattern");
            Token (Name "case_class_pattern");
            Token (Name "infix_pattern");
            Token (Name "alternative_pattern");
            Token (Name "typed_pattern");
            Token (Name "number");
            Token (Name "string");
            Token (Name "wildcard");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "identifier");
                Token (Name "capture_pattern");
                Token (Name "tuple_pattern");
                Token (Name "case_class_pattern");
                Token (Name "infix_pattern");
                Token (Name "alternative_pattern");
                Token (Name "typed_pattern");
                Token (Name "number");
                Token (Name "string");
                Token (Name "wildcard");
              |];
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "case_clause",
  Some (
    Seq [
      Token (Literal "case");
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
      Opt (
        Token (Name "guard");
      );
      Token (Literal "=>");
      Opt (
        Token (Name "block");
      );
    ];
  );
  "catch_clause",
  Some (
    Seq [
      Token (Literal "catch");
      Token (Name "case_block");
    ];
  );
  "class_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Opt (
        Token (Name "modifiers");
      );
      Opt (
        Token (Literal "case");
      );
      Token (Literal "class");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Repeat (
        Token (Name "class_parameters");
      );
      Opt (
        Token (Name "extends_clause");
      );
      Opt (
        Token (Name "template_body");
      );
    ];
  );
  "class_parameter",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Opt (
        Alt [|
          Token (Literal "val");
          Token (Literal "var");
        |];
      );
      Token (Name "identifier");
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "type");
        ];
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "class_parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Literal "implicit");
      );
      Opt (
        Seq [
          Token (Name "class_parameter");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "class_parameter");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "compound_type",
  Some (
    Seq [
      Token (Name "annotated_type");
      Repeat1 (
        Seq [
          Token (Literal "with");
          Token (Name "annotated_type");
        ];
      );
    ];
  );
  "context_bound",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "contravariant_type_parameter",
  Some (
    Seq [
      Token (Literal "-");
      Token (Name "type_parameter");
    ];
  );
  "covariant_type_parameter",
  Some (
    Seq [
      Token (Literal "+");
      Token (Name "type_parameter");
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "if_expression");
      Token (Name "match_expression");
      Token (Name "try_expression");
      Token (Name "call_expression");
      Token (Name "generic_function");
      Token (Name "assignment_expression");
      Token (Name "parenthesized_expression");
      Token (Name "string_transform_expression");
      Token (Name "field_expression");
      Token (Name "instance_expression");
      Token (Name "infix_expression");
      Token (Name "prefix_expression");
      Token (Name "tuple_expression");
      Token (Name "case_block");
      Token (Name "block_");
      Token (Name "identifier");
      Token (Name "number");
      Token (Name "string");
    |];
  );
  "extends_clause",
  Some (
    Seq [
      Token (Literal "extends");
      Token (Name "type");
      Opt (
        Token (Name "arguments");
      );
    ];
  );
  "field_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "finally_clause",
  Some (
    Seq [
      Token (Literal "finally");
      Token (Name "expression");
    ];
  );
  "function_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "def");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Repeat (
        Token (Name "parameters");
      );
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "type");
        ];
      );
    ];
  );
  "function_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "def");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Repeat (
        Token (Name "parameters");
      );
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "type");
        ];
      );
      Alt [|
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
        Token (Name "block_");
      |];
    ];
  );
  "function_type",
  Some (
    Seq [
      Token (Name "parameter_types");
      Token (Literal "=>");
      Token (Name "type");
    ];
  );
  "generic_function",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "type_arguments");
    ];
  );
  "generic_type",
  Some (
    Seq [
      Token (Name "simple_type");
      Token (Name "type_arguments");
    ];
  );
  "guard",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "expression");
    ];
  );
  "if_expression",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "parenthesized_expression");
      Token (Name "expression");
      Opt (
        Seq [
          Token (Literal "else");
          Token (Name "expression");
        ];
      );
    ];
  );
  "infix_expression",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Name "identifier");
        Token (Name "operator_identifier");
      |];
      Token (Name "expression");
    ];
  );
  "infix_pattern",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
      Alt [|
        Token (Name "identifier");
        Token (Name "operator_identifier");
      |];
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
    ];
  );
  "infix_type",
  Some (
    Seq [
      Alt [|
        Token (Name "compound_type");
        Token (Name "infix_type");
        Token (Name "annotated_type");
      |];
      Alt [|
        Token (Name "identifier");
        Token (Name "operator_identifier");
      |];
      Alt [|
        Token (Name "compound_type");
        Token (Name "infix_type");
        Token (Name "annotated_type");
      |];
    ];
  );
  "instance_expression",
  Some (
    Seq [
      Token (Literal "new");
      Token (Name "expression");
    ];
  );
  "interpolation",
  Some (
    Seq [
      Token (Literal "$");
      Alt [|
        Token (Name "identifier");
        Token (Name "block_");
      |];
    ];
  );
  "lazy_parameter_type",
  Some (
    Seq [
      Token (Literal "=>");
      Token (Name "type");
    ];
  );
  "lower_bound",
  Some (
    Seq [
      Token (Literal ">:");
      Token (Name "type");
    ];
  );
  "match_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "match");
      Token (Name "case_block");
    ];
  );
  "object_definition",
  Some (
    Seq [
      Opt (
        Token (Literal "case");
      );
      Token (Literal "object");
      Token (Name "object_definition_");
    ];
  );
  "object_definition_",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Token (Name "extends_clause");
      );
      Opt (
        Token (Name "template_body");
      );
    ];
  );
  "package_clause",
  Some (
    Seq [
      Token (Literal "package");
      Token (Name "package_identifier");
      Opt (
        Token (Name "template_body");
      );
    ];
  );
  "package_object",
  Some (
    Seq [
      Token (Literal "package");
      Token (Literal "object");
      Token (Name "object_definition_");
    ];
  );
  "parameter",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Token (Name "identifier");
      Opt (
        Seq [
          Token (Literal ":");
          Alt [|
            Token (Name "type");
            Token (Name "lazy_parameter_type");
            Token (Name "repeated_parameter_type");
          |];
        ];
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "parameter_types",
  Some (
    Alt [|
      Token (Name "annotated_type");
      Seq [
        Token (Literal "(");
        Opt (
          Seq [
            Alt [|
              Token (Name "type");
              Token (Name "lazy_parameter_type");
              Token (Name "repeated_parameter_type");
            |];
            Repeat (
              Seq [
                Token (Literal ",");
                Alt [|
                  Token (Name "type");
                  Token (Name "lazy_parameter_type");
                  Token (Name "repeated_parameter_type");
                |];
              ];
            );
          ];
        );
        Token (Literal ")");
      ];
      Token (Name "compound_type");
      Token (Name "infix_type");
    |];
  );
  "parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Literal "implicit");
      );
      Opt (
        Seq [
          Token (Name "parameter");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "parameter");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "prefix_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "+");
        Token (Literal "-");
        Token (Literal "!");
        Token (Literal "~");
      |];
      Token (Name "expression");
    ];
  );
  "projected_type",
  Some (
    Seq [
      Token (Name "simple_type");
      Token (Literal "#");
      Token (Name "identifier");
    ];
  );
  "repeated_parameter_type",
  Some (
    Seq [
      Token (Name "type");
      Token (Literal "*");
    ];
  );
  "simple_type",
  Some (
    Alt [|
      Token (Name "generic_type");
      Token (Name "projected_type");
      Token (Name "tuple_type");
      Token (Name "stable_type_identifier");
      Token (Name "identifier");
    |];
  );
  "string",
  Some (
    Alt [|
      Token (Name "simple_string");
      Seq [
        Token (Name "string_start");
        Token (Name "interpolation");
        Repeat (
          Seq [
            Token (Name "string_middle");
            Token (Name "interpolation");
          ];
        );
        Token (Name "string_end");
      ];
      Seq [
        Token (Name "multiline_string_start");
        Token (Name "interpolation");
        Repeat (
          Seq [
            Token (Name "multiline_string_middle");
            Token (Name "interpolation");
          ];
        );
        Token (Name "multiline_string_end");
      ];
    |];
  );
  "string_transform_expression",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "string");
    ];
  );
  "template_body",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "block");
      );
      Token (Literal "}");
    ];
  );
  "trait_definition",
  Some (
    Seq [
      Token (Literal "trait");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "extends_clause");
      );
      Opt (
        Token (Name "template_body");
      );
    ];
  );
  "try_expression",
  Some (
    Seq [
      Token (Literal "try");
      Token (Name "expression");
      Opt (
        Token (Name "catch_clause");
      );
      Opt (
        Token (Name "finally_clause");
      );
    ];
  );
  "tuple_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "expression");
      Repeat1 (
        Seq [
          Token (Literal ",");
          Token (Name "expression");
        ];
      );
      Token (Literal ")");
    ];
  );
  "tuple_pattern",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
      Repeat1 (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "identifier");
            Token (Name "capture_pattern");
            Token (Name "tuple_pattern");
            Token (Name "case_class_pattern");
            Token (Name "infix_pattern");
            Token (Name "alternative_pattern");
            Token (Name "typed_pattern");
            Token (Name "number");
            Token (Name "string");
            Token (Name "wildcard");
          |];
        ];
      );
      Token (Literal ")");
    ];
  );
  "tuple_type",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type");
        ];
      );
      Token (Literal ")");
    ];
  );
  "type",
  Some (
    Alt [|
      Token (Name "function_type");
      Token (Name "compound_type");
      Token (Name "infix_type");
      Token (Name "annotated_type");
    |];
  );
  "type_arguments",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "type");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type");
        ];
      );
      Token (Literal "]");
    ];
  );
  "type_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "type");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Literal "=");
      Token (Name "type");
    ];
  );
  "type_parameter",
  Some (
    Seq [
      Alt [|
        Token (Name "wildcard");
        Token (Name "identifier");
      |];
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "upper_bound");
      );
      Opt (
        Token (Name "lower_bound");
      );
      Opt (
        Repeat (
          Token (Name "view_bound");
        );
      );
      Opt (
        Repeat (
          Token (Name "context_bound");
        );
      );
    ];
  );
  "type_parameters",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "variant_type_parameter");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "variant_type_parameter");
        ];
      );
      Token (Literal "]");
    ];
  );
  "typed_pattern",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "upper_bound",
  Some (
    Seq [
      Token (Literal "<:");
      Token (Name "type");
    ];
  );
  "val_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "val");
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "identifier");
        ];
      );
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "val_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "val");
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "type");
        ];
      );
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "var_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "var");
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "identifier");
        ];
      );
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "var_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "var");
      Alt [|
        Token (Name "identifier");
        Token (Name "capture_pattern");
        Token (Name "tuple_pattern");
        Token (Name "case_class_pattern");
        Token (Name "infix_pattern");
        Token (Name "alternative_pattern");
        Token (Name "typed_pattern");
        Token (Name "number");
        Token (Name "string");
        Token (Name "wildcard");
      |];
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "type");
        ];
      );
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "variant_type_parameter",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Alt [|
        Token (Name "covariant_type_parameter");
        Token (Name "contravariant_type_parameter");
        Token (Name "type_parameter");
      |];
    ];
  );
  "view_bound",
  Some (
    Seq [
      Token (Literal "<%");
      Token (Name "type");
    ];
  );
  "compilation_unit",
  Some (
    Repeat (
      Alt [|
        Token (Name "package_clause");
        Token (Name "package_object");
        Token (Name "class_definition");
        Token (Name "import_declaration");
        Token (Name "object_definition");
        Token (Name "trait_definition");
        Token (Name "val_definition");
        Token (Name "val_declaration");
        Token (Name "var_definition");
        Token (Name "var_declaration");
        Token (Name "type_definition");
        Token (Name "function_definition");
        Token (Name "function_declaration");
      |];
    );
  );
]

let trans_automatic_semicolon ((kind, body) : mt) : CST.automatic_semicolon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_start ((kind, body) : mt) : CST.string_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_end ((kind, body) : mt) : CST.string_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_middle ((kind, body) : mt) : CST.string_middle =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_operator_identifier ((kind, body) : mt) : CST.operator_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_wildcard ((kind, body) : mt) : CST.wildcard =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_multiline_string_end ((kind, body) : mt) : CST.multiline_string_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_multiline_string_middle ((kind, body) : mt) : CST.multiline_string_middle =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_modifiers ((kind, body) : mt) : CST.modifiers =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Abst (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Final (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Sealed (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (3, v) ->
              `Impl (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (4, v) ->
              `Lazy (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (5, v) ->
              `Over (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (6, v) ->
              `Priv (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (7, v) ->
              `Prot (
                Run.trans_token (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_multiline_string_start ((kind, body) : mt) : CST.multiline_string_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_number ((kind, body) : mt) : CST.number =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_simple_string ((kind, body) : mt) : CST.simple_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let rec trans_stable_identifier ((kind, body) : mt) : CST.stable_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Stable_id (
                  trans_stable_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_package_identifier ((kind, body) : mt) : CST.package_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_renamed_identifier ((kind, body) : mt) : CST.renamed_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_stable_type_identifier ((kind, body) : mt) : CST.stable_type_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Stable_id (
                  trans_stable_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_selectors ((kind, body) : mt) : CST.import_selectors =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rena_id (
                  trans_renamed_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Rena_id (
                            trans_renamed_identifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_expression ((kind, body) : mt) : CST.import_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Stable_id (
                  trans_stable_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Wild (
                            trans_wildcard (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Import_selecs (
                            trans_import_selectors (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_declaration ((kind, body) : mt) : CST.import_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_import_expression (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_import_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_alternative_pattern ((kind, body) : mt) : CST.alternative_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_annotated_type ((kind, body) : mt) : CST.annotated_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_simple_type (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_annotation ((kind, body) : mt) : CST.annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_simple_type (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_arguments (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arguments ((kind, body) : mt) : CST.arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_expression ((kind, body) : mt) : CST.assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block ((kind, body) : mt) : CST.block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_pack_clause (
                  (match v with
                  | Alt (0, v) ->
                      `Pack_clause (
                        trans_package_clause (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Pack_obj (
                        trans_package_object (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Class_defi (
                        trans_class_definition (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Import_decl (
                        trans_import_declaration (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Obj_defi (
                        trans_object_definition (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Trait_defi (
                        trans_trait_definition (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Val_defi (
                        trans_val_definition (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Val_decl (
                        trans_val_declaration (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Var_defi (
                        trans_var_definition (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Var_decl (
                        trans_var_declaration (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Type_defi (
                        trans_type_definition (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Func_defi (
                        trans_function_definition (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Func_decl (
                        trans_function_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `SEMI (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Auto_semi (
                            trans_automatic_semicolon (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_pack_clause (
                            (match v with
                            | Alt (0, v) ->
                                `Pack_clause (
                                  trans_package_clause (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Pack_obj (
                                  trans_package_object (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Class_defi (
                                  trans_class_definition (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Import_decl (
                                  trans_import_declaration (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Obj_defi (
                                  trans_object_definition (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Trait_defi (
                                  trans_trait_definition (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `Val_defi (
                                  trans_val_definition (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `Val_decl (
                                  trans_val_declaration (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `Var_defi (
                                  trans_var_definition (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `Var_decl (
                                  trans_var_declaration (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Type_defi (
                                  trans_type_definition (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Func_defi (
                                  trans_function_definition (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `Func_decl (
                                  trans_function_declaration (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Auto_semi (
                      trans_automatic_semicolon (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block_ ((kind, body) : mt) : CST.block_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_block (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_arguments (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Blk_ (
                      trans_block_ (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Case_blk (
                      trans_case_block (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_capture_pattern ((kind, body) : mt) : CST.capture_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case_block ((kind, body) : mt) : CST.case_block =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LCURL_RCURL (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `LCURL_rep1_case_clause_RCURL (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat1
                    (fun v -> trans_case_clause (Run.matcher_token v))
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case_class_pattern ((kind, body) : mt) : CST.case_class_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Stable_type_id (
                  trans_stable_type_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Capt_pat (
                            trans_capture_pattern (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Tuple_pat (
                            trans_tuple_pattern (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Case_class_pat (
                            trans_case_class_pattern (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Infix_pat (
                            trans_infix_pattern (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Alt_pat (
                            trans_alternative_pattern (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Typed_pat (
                            trans_typed_pattern (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Num (
                            trans_number (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Wild (
                            trans_wildcard (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Id (
                                      trans_identifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Capt_pat (
                                      trans_capture_pattern (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Tuple_pat (
                                      trans_tuple_pattern (Run.matcher_token v)
                                    )
                                | Alt (3, v) ->
                                    `Case_class_pat (
                                      trans_case_class_pattern (Run.matcher_token v)
                                    )
                                | Alt (4, v) ->
                                    `Infix_pat (
                                      trans_infix_pattern (Run.matcher_token v)
                                    )
                                | Alt (5, v) ->
                                    `Alt_pat (
                                      trans_alternative_pattern (Run.matcher_token v)
                                    )
                                | Alt (6, v) ->
                                    `Typed_pat (
                                      trans_typed_pattern (Run.matcher_token v)
                                    )
                                | Alt (7, v) ->
                                    `Num (
                                      trans_number (Run.matcher_token v)
                                    )
                                | Alt (8, v) ->
                                    `Str (
                                      trans_string_ (Run.matcher_token v)
                                    )
                                | Alt (9, v) ->
                                    `Wild (
                                      trans_wildcard (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case_clause ((kind, body) : mt) : CST.case_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_guard (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_block (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_catch_clause ((kind, body) : mt) : CST.catch_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_case_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_definition ((kind, body) : mt) : CST.class_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_identifier (Run.matcher_token v4),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v5
            ,
            Run.repeat
              (fun v -> trans_class_parameters (Run.matcher_token v))
              v6
            ,
            Run.opt
              (fun v -> trans_extends_clause (Run.matcher_token v))
              v7
            ,
            Run.opt
              (fun v -> trans_template_body (Run.matcher_token v))
              v8
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_parameter ((kind, body) : mt) : CST.class_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Val (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_parameters ((kind, body) : mt) : CST.class_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_class_parameter (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_class_parameter (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_type ((kind, body) : mt) : CST.compound_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_annotated_type (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_annotated_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_context_bound ((kind, body) : mt) : CST.context_bound =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_contravariant_type_parameter ((kind, body) : mt) : CST.contravariant_type_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_parameter (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_covariant_type_parameter ((kind, body) : mt) : CST.covariant_type_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_parameter (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `If_exp (
            trans_if_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Match_exp (
            trans_match_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Try_exp (
            trans_try_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Call_exp (
            trans_call_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Gene_func (
            trans_generic_function (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Assign_exp (
            trans_assignment_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Str_tran_exp (
            trans_string_transform_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Field_exp (
            trans_field_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Inst_exp (
            trans_instance_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Infix_exp (
            trans_infix_expression (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Prefix_exp (
            trans_prefix_expression (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Tuple_exp (
            trans_tuple_expression (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Case_blk (
            trans_case_block (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Blk_ (
            trans_block_ (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Num (
            trans_number (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_extends_clause ((kind, body) : mt) : CST.extends_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_arguments (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_expression ((kind, body) : mt) : CST.field_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_finally_clause ((kind, body) : mt) : CST.finally_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_declaration ((kind, body) : mt) : CST.function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v4
            ,
            Run.repeat
              (fun v -> trans_parameters (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_definition ((kind, body) : mt) : CST.function_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v4
            ,
            Run.repeat
              (fun v -> trans_parameters (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            (match v7 with
            | Alt (0, v) ->
                `EQ_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Blk_ (
                  trans_block_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_type ((kind, body) : mt) : CST.function_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_parameter_types (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generic_function ((kind, body) : mt) : CST.generic_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_type_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generic_type ((kind, body) : mt) : CST.generic_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_simple_type (Run.matcher_token v0),
            trans_type_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_guard ((kind, body) : mt) : CST.guard =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_expression ((kind, body) : mt) : CST.if_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_infix_expression ((kind, body) : mt) : CST.infix_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Op_id (
                  trans_operator_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_infix_pattern ((kind, body) : mt) : CST.infix_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Op_id (
                  trans_operator_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_infix_type ((kind, body) : mt) : CST.infix_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Comp_type (
                  trans_compound_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Infix_type (
                  trans_infix_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Anno_type (
                  trans_annotated_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Op_id (
                  trans_operator_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Comp_type (
                  trans_compound_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Infix_type (
                  trans_infix_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Anno_type (
                  trans_annotated_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_instance_expression ((kind, body) : mt) : CST.instance_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interpolation ((kind, body) : mt) : CST.interpolation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Blk_ (
                  trans_block_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lazy_parameter_type ((kind, body) : mt) : CST.lazy_parameter_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lower_bound ((kind, body) : mt) : CST.lower_bound =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_expression ((kind, body) : mt) : CST.match_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_case_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_definition ((kind, body) : mt) : CST.object_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_object_definition_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_definition_ ((kind, body) : mt) : CST.object_definition_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_extends_clause (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_template_body (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_package_clause ((kind, body) : mt) : CST.package_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_package_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_template_body (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_package_object ((kind, body) : mt) : CST.package_object =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_object_definition_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter ((kind, body) : mt) : CST.parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type (
                            trans_type_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Lazy_param_type (
                            trans_lazy_parameter_type (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Repe_param_type (
                            trans_repeated_parameter_type (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_types ((kind, body) : mt) : CST.parameter_types =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Anno_type (
            trans_annotated_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `LPAR_opt_choice_type_rep_COMMA_choice_type_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Type (
                                  trans_type_ (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Lazy_param_type (
                                  trans_lazy_parameter_type (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Repe_param_type (
                                  trans_repeated_parameter_type (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Type (
                                            trans_type_ (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Lazy_param_type (
                                            trans_lazy_parameter_type (Run.matcher_token v)
                                          )
                                      | Alt (2, v) ->
                                          `Repe_param_type (
                                            trans_repeated_parameter_type (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Comp_type (
            trans_compound_type (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Infix_type (
            trans_infix_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameters ((kind, body) : mt) : CST.parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_parameter (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_parameter (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_prefix_expression ((kind, body) : mt) : CST.prefix_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `TILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_projected_type ((kind, body) : mt) : CST.projected_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_simple_type (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_repeated_parameter_type ((kind, body) : mt) : CST.repeated_parameter_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_ (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_type ((kind, body) : mt) : CST.simple_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Gene_type (
            trans_generic_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Proj_type (
            trans_projected_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Tuple_type (
            trans_tuple_type (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Stable_type_id (
            trans_stable_type_identifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_str (
            trans_simple_string (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Str_start_interp_rep_str_middle_interp_str_end (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_string_start (Run.matcher_token v0),
                  trans_interpolation (Run.matcher_token v1),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_string_middle (Run.matcher_token v0),
                            trans_interpolation (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                  ,
                  trans_string_end (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Mult_str_start_interp_rep_mult_str_middle_interp_mult_str_end (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_multiline_string_start (Run.matcher_token v0),
                  trans_interpolation (Run.matcher_token v1),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_multiline_string_middle (Run.matcher_token v0),
                            trans_interpolation (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                  ,
                  trans_multiline_string_end (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_transform_expression ((kind, body) : mt) : CST.string_transform_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_string_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_body ((kind, body) : mt) : CST.template_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_block (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_trait_definition ((kind, body) : mt) : CST.trait_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_extends_clause (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_template_body (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_expression ((kind, body) : mt) : CST.try_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_catch_clause (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_finally_clause (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_expression ((kind, body) : mt) : CST.tuple_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_pattern ((kind, body) : mt) : CST.tuple_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Capt_pat (
                            trans_capture_pattern (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Tuple_pat (
                            trans_tuple_pattern (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Case_class_pat (
                            trans_case_class_pattern (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Infix_pat (
                            trans_infix_pattern (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Alt_pat (
                            trans_alternative_pattern (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Typed_pat (
                            trans_typed_pattern (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Num (
                            trans_number (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Wild (
                            trans_wildcard (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type ((kind, body) : mt) : CST.tuple_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_ ((kind, body) : mt) : CST.type_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Func_type (
            trans_function_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Comp_type (
            trans_compound_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Infix_type (
            trans_infix_type (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Anno_type (
            trans_annotated_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_arguments ((kind, body) : mt) : CST.type_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_definition ((kind, body) : mt) : CST.type_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_type_ (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter ((kind, body) : mt) : CST.type_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_upper_bound (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_lower_bound (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v ->
                Run.repeat
                  (fun v -> trans_view_bound (Run.matcher_token v))
                  v
              )
              v4
            ,
            Run.opt
              (fun v ->
                Run.repeat
                  (fun v -> trans_context_bound (Run.matcher_token v))
                  v
              )
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameters ((kind, body) : mt) : CST.type_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_variant_type_parameter (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_variant_type_parameter (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed_pattern ((kind, body) : mt) : CST.typed_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_upper_bound ((kind, body) : mt) : CST.upper_bound =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_val_declaration ((kind, body) : mt) : CST.val_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_type_ (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_val_definition ((kind, body) : mt) : CST.val_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_expression (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_var_declaration ((kind, body) : mt) : CST.var_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_type_ (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_var_definition ((kind, body) : mt) : CST.var_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capt_pat (
                  trans_capture_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple_pat (
                  trans_tuple_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Case_class_pat (
                  trans_case_class_pattern (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Infix_pat (
                  trans_infix_pattern (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Alt_pat (
                  trans_alternative_pattern (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Typed_pat (
                  trans_typed_pattern (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Wild (
                  trans_wildcard (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_expression (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variant_type_parameter ((kind, body) : mt) : CST.variant_type_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Cova_type_param (
                  trans_covariant_type_parameter (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Cont_type_param (
                  trans_contravariant_type_parameter (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_param (
                  trans_type_parameter (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_view_bound ((kind, body) : mt) : CST.view_bound =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_compilation_unit ((kind, body) : mt) : CST.compilation_unit =
  match body with
  | Children v ->
      Run.repeat
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Pack_clause (
                trans_package_clause (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Pack_obj (
                trans_package_object (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Class_defi (
                trans_class_definition (Run.matcher_token v)
              )
          | Alt (3, v) ->
              `Import_decl (
                trans_import_declaration (Run.matcher_token v)
              )
          | Alt (4, v) ->
              `Obj_defi (
                trans_object_definition (Run.matcher_token v)
              )
          | Alt (5, v) ->
              `Trait_defi (
                trans_trait_definition (Run.matcher_token v)
              )
          | Alt (6, v) ->
              `Val_defi (
                trans_val_definition (Run.matcher_token v)
              )
          | Alt (7, v) ->
              `Val_decl (
                trans_val_declaration (Run.matcher_token v)
              )
          | Alt (8, v) ->
              `Var_defi (
                trans_var_definition (Run.matcher_token v)
              )
          | Alt (9, v) ->
              `Var_decl (
                trans_var_declaration (Run.matcher_token v)
              )
          | Alt (10, v) ->
              `Type_defi (
                trans_type_definition (Run.matcher_token v)
              )
          | Alt (11, v) ->
              `Func_defi (
                trans_function_definition (Run.matcher_token v)
              )
          | Alt (12, v) ->
              `Func_decl (
                trans_function_declaration (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false


let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_compilation_unit matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

